type HelperFunction = (context: any, data: any, innerTemplate: any) => any;
export declare class JsonTemplateEngine {
    helpers: Record<string, HelperFunction>;
    constructor();
    registerHelper(name: string, fn: HelperFunction): void;
    applyTemplate(template: any, data: any): any;
    lookup(varPath: string, data: any): any;
    proccessHelper(string: string, data: any, innerTemplate?: any): any;
    logHelper(varPath: string, data: any, innerTemplate: any): any;
    varHelper(string: any, data: any): any;
    lengthHelper(varPath: string, data: any): any;
    eachHelper(string: any, data: any, innerTemplate: any): any;
    loopHelper(string: any, data: any, innerTemplate: any): any;
    ifHelper(condition: string, data: any, innerTemplate: any): boolean;
    unlessHelper(condition: string, data: any, innerTemplate: any): boolean;
    withHelper(scopePath: string, data: any, innerTemplate: any): any;
    setHelper(varName: string, data: any, innerTemplate: any): any;
    concatHelper(args: string, data: any): any;
    mathHelper(expression: string, data: any): any;
    compareHelper(expression: string, data: any): boolean;
    upperCaseHelper(varPath: string, data: any): any;
    lowerCaseHelper(varPath: string, data: any): any;
    jsonStringifyHelper(varPath: string, data: any): any;
    jsonParseHelper(varPath: string, data: any): any;
    dateHelper(varPath: string, data: any): any;
    repeatHelper(args: string, data: any): any;
    sliceHelper(args: string, data: any): any;
    joinHelper(args: string, data: any): any;
    findHelper(args: string, data: any): any;
    mapHelper(args: string, data: any, innerTemplate: any): any;
    uniqueHelper(varPath: string, data: any): any;
    randomHelper(varPath: string, data: any): any;
    reverseHelper(varPath: string, data: any): any;
    existsHelper(varPath: string, data: any): boolean;
}
export {};
